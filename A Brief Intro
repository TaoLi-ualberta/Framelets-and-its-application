 Generally, framelet analysis can be somehow viewed as the superset of wavelet analysis. Mathematically, the difference between the two is that the affine system 
 generated by a framelet is a frame while that by wavelet is a basis.(Basically, a framelet or wavelet is a set of functions with generated an affine system)
 Naturally, framelet and wavelet share a lot in common(that's also why we don't deal with them seperately under some circumstances). For example, both enjoy directionality
 and are able to sparsify a set of data. However, in some way, framelet is more desired for its redundancy, which means additional data or elements are allowed in framelet transform.
 Actually, the key difference lies in the affine systems derived from framelet or wavelet. As I have mentioned, the affine system from a framelet is a frame which means additional elements
 are "legal" for representing a given function. It is noted that the word "additional" means that in compariosn with a basis, a frame may provide us with many liner representations (not uniquely)for a given data.
 For example, for a vector in three dimensional euclidean space can be uniquely represented as a liner combination of the unit vecotrs along x-axis, y-axis and z-axis respectively. 
 You may choose another basis but once the basis is determined, there is only one approach to represent the given vector and the number of coefficients is in corespondence with the dimension.
 In a nutshell, framelet analysis like wavelet has its role in signal processing and there are numerous related work. Based on other researchers' fabulous work, this project is just 
 a try in applied and computational harmonic analysis and it's totally based on my personal interest. Currently, I have some interesting results in constructinng directional compactly supported 
 tight framelt, which is the primary research output of an undergraduate scientific research training program at Univ of Alberta. With these fundamentals in this field, I would like to dive deeper so I creat such project on GitHub. 
